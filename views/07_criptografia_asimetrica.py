import streamlit as st
#hola

st.title(":üßÆ : Aritm√©tica Modular")

st.write("La aritm√©tica modular es un sistema matem√°tico que trata con n√∫meros enteros, pero en lugar de trabajar con n√∫meros continuos, se enfoca en los residuos de la divisi√≥n.")

st.write("**Definici√≥n b√°sica:**")

st.write("En la aritm√©tica modular, dos n√∫meros enteros se consideran equivalentes si tienen el mismo residuo cuando se dividen por un n√∫mero fijo llamado m√≥dulo. Si dos n√∫meros 'a' y 'b' tienen el mismo residuo cuando se dividen por el m√≥dulo 'p', se escriben como 'a ‚â° b (mod p)'.")

st.write("**Ejemplo:**")

st.write("Si el m√≥dulo es 5, entonces 8 y 3 son equivalentes m√≥dulo 5, ya que ambos tienen un residuo de 3 cuando se dividen por 5. Por lo tanto, '8 ‚â° 3 (mod 5)'.")

st.write("**Operaciones b√°sicas:**")

st.write("- **Adici√≥n:** La suma de dos n√∫meros m√≥dulo 'p' es el residuo de la suma cuando se divide por 'p'.")
st.write("- **Sustracci√≥n:** La resta de dos n√∫meros m√≥dulo 'p' es el residuo de la resta cuando se divide por 'p'.")
st.write("- **Multiplicaci√≥n:** El producto de dos n√∫meros m√≥dulo 'p' es el residuo del producto cuando se divide por 'p'.")
st.write("- **Exponentiaci√≥n:** El resultado de elevar un n√∫mero a una potencia m√≥dulo 'p' es el residuo de la potencia cuando se divide por 'p'.")

st.write("**Grupos en Aritm√©tica Modular:**")

st.write("En el contexto de la aritm√©tica modular, un grupo es un conjunto de elementos junto con una operaci√≥n binaria que satisface las propiedades de cierre, asociatividad, identidad e inverso. Los grupos pueden ser aditivos o multiplicativos.")

st.write("**Grupo Aditivo:**")

st.write("El conjunto de n√∫meros enteros m√≥dulo 'p' con la operaci√≥n de adici√≥n forma un grupo abeliano. Este grupo cumple las siguientes propiedades:")
st.write("- **Cierre:** Si 'a' y 'b' est√°n en el conjunto, entonces 'a + b' tambi√©n est√° en el conjunto.")
st.write("- **Asociatividad:** La suma es asociativa: '((a + b) + c) ‚â° (a + (b + c)) (mod p)'.")
st.write("- **Identidad:** Existe un elemento identidad '0' tal que 'a + 0 ‚â° a (mod p)' para todo 'a' en el conjunto.")
st.write("- **Inverso:** Para cada 'a', existe un inverso '-a' tal que 'a + (-a) ‚â° 0 (mod p)'.")

st.write("**Grupo Multiplicativo:**")

st.write("El conjunto de n√∫meros enteros coprimos con 'p' (es decir, aquellos entre 1 y p-1 que no tienen factores comunes con 'p') con la operaci√≥n de multiplicaci√≥n forma un grupo multiplicativo. Este grupo cumple las siguientes propiedades:")
st.write("- **Cierre:** Si 'a' y 'b' est√°n en el conjunto, entonces 'a * b' tambi√©n est√° en el conjunto.")
st.write("- **Asociatividad:** La multiplicaci√≥n es asociativa: '((a * b) * c) ‚â° (a * (b * c)) (mod p)'.")
st.write("- **Identidad:** Existe un elemento identidad '1' tal que 'a * 1 ‚â° a (mod p)' para todo 'a' en el conjunto.")
st.write("- **Inverso:** Para cada 'a', existe un inverso 'a^(-1)' tal que 'a * a^(-1) ‚â° 1 (mod p)'. Este inverso existe si y solo si 'a' es coprimo con 'p'.")

st.write("**Reglas de la Aritm√©tica Modular:**")

st.write("Las operaciones b√°sicas de la aritm√©tica modular incluyen:")
st.write("- **Adici√≥n:** '(a + b) mod p'.")
st.write("- **Sustracci√≥n:** '(a - b) mod p'.")
st.write("- **Multiplicaci√≥n:** '(a * b) mod p'.")
st.write("- **Exponentiaci√≥n:** '(a^b) mod p'. Esto se calcula de manera eficiente mediante el algoritmo de exponenciaci√≥n modular.")





# T√≠tulo y descripci√≥n principal
st.title(":closed_lock_with_key: Intercambio de Claves Diffie-Hellman")

# Descripci√≥n del protocolo Diffie-Hellman
st.markdown("""
El intercambio de claves **Diffie-Hellman (D-H)** es un protocolo fundamental que permite a dos partes establecer una clave secreta compartida a trav√©s de un canal inseguro, como internet.

### Ejemplo de funcionamiento:

1. **Alice y Bob acuerdan un m√≥dulo grande** `p` **y un generador** `g`.
2. **Alice elige un secreto aleatorio** `a` **y calcula** `A = g^a mod p`.
3. **Bob elige un secreto aleatorio** `b` **y calcula** `B = g^b mod p`.
4. **Alice env√≠a** `A` **a Bob y Bob env√≠a** `B` **a Alice**.
5. **Alice calcula** `K = B^a mod p`.
6. **Bob calcula** `K = A^b mod p`.

### Seguridad:

La seguridad del protocolo D-H se basa en la dificultad de calcular el logaritmo discreto.

### Problema del logaritmo discreto:

- **Definici√≥n:** Dado un m√≥dulo `p`, un generador `g` y un elemento `h` en el grupo c√≠clico `Z/pZ`, encontrar el entero `x` tal que `g^x = h mod p`.

### Dificultad:

El problema del logaritmo discreto se considera computacionalmente dif√≠cil para m√≥dulos grandes. No se conoce un algoritmo eficiente para resolverlo en general.
""")

st.markdown("""
    ### Compromiso

En 1976, Whitfield Diffie y Martin Hellman publicaron un m√©todo para establecer un secreto compartido entre dos partes, permitiendo un canal de comunicaci√≥n eficiente. Este m√©todo genera una llave privada conocida por ambas partes para encriptar y desencriptar informaci√≥n sim√©tricamente. Aunque la criptograf√≠a asim√©trica es ineficiente para compartir muchos mensajes extensos, es ideal para compartir una llave de encriptaci√≥n sim√©trica.

El protocolo Diffie-Hellman establece un canal de comunicaci√≥n asim√©trica para compartir informaci√≥n en una √∫nica ocasi√≥n por sesi√≥n. Las partes generan una llave sim√©trica a partir de sus claves privadas y p√∫blicas, permitiendo un canal de comunicaci√≥n sim√©trico descifrable solo por ellos con una llave compartida.
""")

st.markdown("""
    ### Protocolo
""")

import base64
# Nota antes de la animaci√≥n
st.markdown("**Nota:** En la animaci√≥n que sigue, cada parte tiene un espacio privado (seguro para los secretos) y comparten un espacio p√∫blico disponible para ellos y cualquier tercero.")

# URL de la animaci√≥n GIF
animation_url = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-1.gif"

# Mostrar la animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url}" alt="Animaci√≥n del intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Segunda parte de la descripci√≥n
st.markdown("""
            
En lugar de Alice y Bob definir una llave p√∫blica y una llave privada respectivamente, solo nos interesa que definan su llave privada (`a` y `b`) y que acuerden entre s√≠, expuestos al p√∫blico, dos valores `g` y `p`.
""")

# URL de la segunda animaci√≥n GIF
animation_url_2 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-2.gif"

# Mostrar la segunda animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_2}" alt="Animaci√≥n del intercambio de claves Diffie-Hellman, segunda parte">', unsafe_allow_html=True)

# Tercera parte de la descripci√≥n
st.markdown("""
Note que al pie de cada regi√≥n llevamos un registro de las variables a las que han tenido acceso sus respectivos usuarios.
""")

# URL de la tercera animaci√≥n GIF
animation_url_3 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-3.gif"

# Mostrar la tercera animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_3}" alt="Registro de variables en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Cuarta parte de la descripci√≥n
st.markdown("""
Con sus respectivas claves privadas, Alice y Bob computan un valor combinado con el generador `g` (recuerde que `g` es p√∫blico). Este proceso de ‚Äòmezclar‚Äô los valores tiene un sentido matem√°tico espec√≠fico que impide que se pueda deshacer la operaci√≥n (No es imposible pero s√≠ en exceso dif√≠cil y costoso). Respectivamente, Alice y Bob produjeron los valores `ag` y `bg` de los cuales no se pueden inferir las claves privadas `a` y `b`. Sin `p`, esta operaci√≥n es imposible.
""")

# URL de la cuarta animaci√≥n GIF
animation_url_4 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-4.gif"

# Mostrar la cuarta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_4}" alt="Proceso de mezclar valores en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Quinta parte de la descripci√≥n
st.markdown("""
Una vez generados estos cifrados, Alice y Bob los intercambian. Note que como a√∫n no hay un canal seguro de comunicaci√≥n, `ag` y `bg` son p√∫blicos.
""")

# URL de la quinta animaci√≥n GIF
animation_url_5 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-5.gif"

# Mostrar la quinta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_5}" alt="Intercambio de cifrados en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)

# Sexta parte de la descripci√≥n
st.markdown("""
Nuevamente realizamos la operaci√≥n de ‚Äòmezclado‚Äô. Alice mezclar√° el cifrado p√∫blico que acaba de recibir de Bob con su clave privada (`bg` con `a`, produce `abg`). Bob, har√° lo mismo con su clave privada y el cifrado p√∫blico que recibi√≥ de Alice (`ag` con `b`, produce `abg`).
""")

# URL de la sexta animaci√≥n GIF
animation_url_6 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-6.gif"

# Mostrar la sexta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_6}" alt="Operaci√≥n de mezclado en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# S√©ptima parte de la descripci√≥n
st.markdown("""
Note que ahora Alice y Bob comparten un cifrado irreversible (id√©ntico para ambos) el cual pueden utilizar para encriptar cualquier mensaje consecuente. Alice y Bob pueden ahora establecer un canal de comunicaci√≥n seguro, con encriptaci√≥n sim√©trica.

Veamos ahora, que √∫nicamente Alice y Bob pueden generar la llave sim√©trica `abg`. El p√∫blico tiene acceso al generador `g`, el valor `p` y las llaves cifradas `ag` y `bg`. No hay forma de ‚Äòmezclar‚Äô estos valores de forma tal que generen `abg`. Intentar ‚Äòmezclar‚Äô `bg` con `ag` producir√≠a algo como `abgg`, lo cual es un valor completamente distinto y que no sirve para descifrar los mensajes entre Alice y Bob. ¬°Hemos establecido un canal seguro de encriptaci√≥n sim√©trica!
""")

# URL de la s√©ptima animaci√≥n GIF
animation_url_7 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-7.gif"

# Mostrar la s√©ptima animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_7}" alt="Establecimiento de canal seguro en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


import streamlit as st

st.markdown("""
Vulnerabilidades
---

El procedimiento parece robusto, pero su intenci√≥n es solo escudar a 2 partidos de un ojo fisg√≥n. ¬øQu√© pasa cuando introducimos a una tercera parte, Mallory, que tiene el poder de interceptar y manipular mensajes entre partes en la red? Tenemos tambi√©n la preocupaci√≥n de que informaci√≥n secreta de alguna de las partes sea liberada al p√∫blico. ¬øPodemos satisfacer que los mensajes previos est√°n seguros?

Ataque de intermediario (Man in the Middle)
---

Suponga un mismo escenario donde Alice y Bob quieren establecer un canal de comunicaci√≥n de encriptaci√≥n sim√©trica, solo que ahora una tercera parte, Mallory, puede intervenir sobre la informaci√≥n que viaja en la red. Por ejemplo, si Alice quisiera mandar su propuesta de un generador `g` a Bob, Mallory sabr√≠a que esto est√° sucediendo evitar que esto suceda, o escoger su propio mensaje para enviarle a Bob. Note que hasta ahora, nuestro m√©todo de comunicaci√≥n no tiene forma de validar el origen de un mensaje en la red, por lo que Mallory puede estar seguro de que su intromisi√≥n en el canal de Alice y Bob no es detectable (a√∫n).

El concepto de este ataque es bastante sencillo. Todo lo que debe hacer Mallory para poder interpretar todos los futuros mensaje entre Alice y Bob es suplantarlos al momento de generar la llave compartida, de forma que Mallory comparte una llave con Bob y una con Alice.

1. Alice y Bob acuerdan un `g` y `p` p√∫blicos y generan sus llaves privadas respectivas.
2. Alice genera `ag` y lo publica en la red con la intenci√≥n de que lo reciba Bob. Bob hace lo mismo para Alice con `bg`.
3. Mallory intercepta estos mensajes y evita que lleguen al destinatario correspondiente.
4. Mallory genera su propia llave privada `m` y produce `mg`.
5. Mallory responde a Alice con `mg` suplantando a Bob. Alice cree que lo que acaba de recibir es `bg`.
6. Mallory responde a Bob con `mg` suplantando a Alice. Bob cree que lo que acaba de recibir es `ag`.
7. Alice y Bob calculan respectivamente `mag` y `mbg`.
8. Mallory calcula `mag` y `mbg`. Ahora comparte un secreto con el cual establecer un canal encriptado sim√©trico con ambos Alice y Bob. Estos no se han percatado del ataque.

Cualquier cifrado enviado por Alice con la intenci√≥n de que lo reciba √∫nicamente Bob, llega primero a Mallory. Mallory puede decidir hacer lo que quiera con este. Si la intenci√≥n es solo mediar la comunicaci√≥n entre Alice y Bob, Mallory debe descifrar el cifrado entrante y encriptarlo con el secreto contrario. Esto le permite editarlo, borrarlo, o incluso compartirlo con otros.

Esta vulnerabilidad fue descubierta pronto, por lo cual se volvi√≥ una pr√°ctica com√∫n agregar un paso de autenticaci√≥n al cifrado sim√©trico. Entran ahora en juego las llaves p√∫blicas.

Forward secrecy (PFS)
---

Forward secrecy es la intenci√≥n de proteger mensajes pasados en caso de que su cifrado haya sido guardado por terceros y el secreto compartido sea publicado. En este caso, la responsabilidad sobre la liberaci√≥n de estos mensajes no recae sobre alguna falla de Diffie-Hellman. En un inicio mencionamos la noci√≥n de una sesi√≥n de comunicaci√≥n. La idea de tener sesiones cortas sobre las cuales habilitar el canal de comunicaci√≥n es beneficiosa ya que cada vez que se inicie una sesi√≥n, la llave compartida puede generarse desde cero en cada ocasi√≥n, de forma que, si se libera la clave, solo los mensajes de esa sesi√≥n son vulnerables. En teor√≠a, nada impide que utilicemos una nueva llave para cada mensaje o para cada sub-cadena de 126 bits o menos. Recordemos que comunicarse por encriptaci√≥n asim√©trica es un proceso costoso, por lo que quisi√©ramos minimizar su uso. Cada vez que intercambiamos claves y generamos un secreto compartido estamos efectuando encriptaci√≥n asim√©trica, ya depende de los due√±os del canal establecer la frecuencia con la que se generan estas llaves ef√≠meras.
""")

###########

import streamlit as st

class Partido:
    # Podemos inicializar cada partido con una llave privada.
    def __init__(self, private_key, important_message):
        # Definimos la llave privada como una variable protegida
        self.__private_key = private_key
        
        # Definimos el mensaje que Alice va a querer enviar a Bob.
        self.__message = important_message
        
        # Por lo pronto no hemos establecido el secreto compartido.
        self.__shared_key = None
    
    # A un partido podemos pedirle su clave p√∫blica dados un generador g y un m√≥dulo p.
    def calculate_public_key(self, g, p):
        # P_A = g^a mod p √≥
        # P_B = g^b mod p
        return g ** self.__private_key % p
    
    # Si conocemos la clave p√∫blica del otro partido podemos conocer el secreto compartido.
    def assign_shared_secret(self, others_public_key, p):
        # S = B^a mod p √≥
        # S = A^b mod p
        self.__shared_key = others_public_key ** self.__private_key % p
    
    # Si tenemos un secreto compartido, podemos cifrar y entregar el mensaje cifrado.
    # Si a√∫n no tenemos un secreto compartido, el mensaje cifrado es vac√≠o.
    # Este cifrado es simple y potencialmente vulnerable, pero un cifrado robusto no es nuestro enfoque del momento,
    # por lo pronto, solo interesa que el cifrado sea sim√©trico.
    def give_cypher(self):
        outward_cypher = ""
        if self.__shared_key:
            for char in self.__message:
                outward_cypher += chr(ord(char) + self.__shared_key)
        return outward_cypher
    
    # Dado un cifrado p√∫blico, probamos descifrarlo con el secreto compartido.
    def decypher(self, inward_cypher):
        message = ""
        for char in inward_cypher:
            message += chr(ord(char) - self.__shared_key)
        return message

# Interfaz de Streamlit
st.title("Intercambio de Claves Diffie-Hellman")

# Inputs para los usuarios
private_key_alice = st.number_input("Llave privada de Alice", min_value=1, value=5, step=1)
private_key_bob = st.number_input("Llave privada de Bob", min_value=1, value=7, step=1)
message = st.text_input("Mensaje importante de Alice a Bob", "Hola Bob!")

# Crear instancias de Alice y Bob
alice = Partido(private_key_alice, message)
bob = Partido(private_key_bob, "")

# Generador y m√≥dulo p√∫blico
g = 9
p = 23

# Calcular claves p√∫blicas
public_key_alice = alice.calculate_public_key(g, p)
public_key_bob = bob.calculate_public_key(g, p)

# Asignar secretos compartidos
alice.assign_shared_secret(public_key_bob, p)
bob.assign_shared_secret(public_key_alice, p)

# Cifrar el mensaje
cypher_message = alice.give_cypher()

# Descifrar el mensaje
decyphered_message = bob.decypher(cypher_message)

# Mostrar resultados
st.subheader("Resultados")
st.write(f"Clave p√∫blica de Alice: {public_key_alice}")
st.write(f"Clave p√∫blica de Bob: {public_key_bob}")
st.write(f"Secreto compartido de Alice: {alice._Partido__shared_key}")
st.write(f"Secreto compartido de Bob: {bob._Partido__shared_key}")
st.write(f"Mensaje cifrado: {cypher_message}")
st.write(f"Mensaje descifrado por Bob: {decyphered_message}")


######
import streamlit as st

st.title(":closed_lock_with_key: Teor√≠a del RSA")

st.write("""
En la secci√≥n de Diffie-Hellman, exploramos el comportamiento de un sistema de intercambio de claves cuyo prop√≥sito es establecer un canal de comunicaci√≥n con cifrado sim√©trico. Para evaluar la efectividad de este m√©todo, usamos cifrados escogidos de forma arbitraria, as√≠ como sesiones para las llaves ef√≠meras de un √∫nico mensaje. Estas decisiones no son caracter√≠sticas de Diffie-Hellman, ya que es un sistema que contempla solo el primer requisito para establecer comunicaci√≥n.

### Introducci√≥n al RSA

Introduciremos el RSA. Nombrado as√≠ por los tres investigadores que publicaron su hallazgo en 1977, el RSA es un sistema criptogr√°fico que, al igual que Diffie-Hellman, contempla una fase de generaci√≥n y distribuci√≥n de llaves, pero tambi√©n incluye m√©todos de encriptaci√≥n y descifrado espec√≠ficos del protocolo.

### Generaci√≥n y Distribuci√≥n de Llaves

- **Fase de Generaci√≥n de Llaves**:
    - En RSA, se generan dos claves: una clave p√∫blica y una clave privada.
    - La clave p√∫blica se distribuye abiertamente, mientras que la clave privada se mantiene secreta.

- **Distribuci√≥n de Llaves**:
    - La clave p√∫blica se utiliza para cifrar mensajes, y solo la clave privada correspondiente puede descifrarlos.

### Encripci√≥n y Descifrado

- **Encripci√≥n**:
    - Para enviar un mensaje seguro, el remitente utiliza la clave p√∫blica del destinatario para cifrar el mensaje.

- **Descifrado**:
    - El destinatario utiliza su clave privada para descifrar el mensaje recibido.

El RSA, por lo tanto, no solo facilita el intercambio de claves, sino que tambi√©n asegura que los mensajes cifrados solo puedan ser descifrados por el destinatario previsto, garantizando as√≠ la confidencialidad y la integridad de la comunicaci√≥n.
""")


st.header("Idea General")

st.write("""
En el caso de la criptograf√≠a sim√©trica, debe establecerse una clave √∫nica para cada canal de comunicaci√≥n. Si, volviendo a nuestro ejemplo ilustrativo del Diffie-Hellman, muchas otras personas quisieran comunicarse con Alice con cifrado sim√©trico, esta tendr√≠a que establecer una llave secreta con cada uno de estos.

Un acercamiento a la criptograf√≠a asim√©trica m√°s rudimentario no es muy distinto, ya que un destinatario de un mensaje tiene una llave p√∫blica √∫nica con la que deber√≠a encriptarse su mensaje para que este pueda descifrarlo con su clave privada. En este caso, la cantidad de llaves que Alice debe manejar en funci√≥n del destinatario es m√≠nima. Alice tan solo contempla su clave p√∫blica, con la que todos pueden encriptar un mensaje destinado a ella, y su clave privada, con la que descifrar√° todo mensaje destinado a ella.

Una analog√≠a com√∫n es aquella del candado y la llave, donde si Alice quiere recibir un mensaje de Bob, le puede prestar una caja con un candado sin llave. Bob empaca su mensaje y lo sella con el candado y despacha la caja para donde Alice. Alice, propietaria de la llave, abre el candado y lee el mensaje de Bob. Es evidente que el candado es el equivalente a una llave p√∫blica y la llave del candado su complemento privado.
""")

#########3
########

import streamlit as st

st.title("Teor√≠a del RSA")

st.subheader("Definici√≥n de la Funci√≥n œÜ de Euler")

st.markdown("""
Definici√≥n: La funci√≥n œÜ, denominada œÜ de Euler, se define para un n√∫mero \( n \) entero positivo de la siguiente forma:
""")

st.latex(r'''\phi: \mathbb{Z}^+ \to \mathbb{N}''')

st.latex(r'''\phi(n) = | \{ k \in \mathbb{Z}^+ \mid k \leq n, \gcd(k, n) = 1 \} |''')

st.markdown("""
es decir, œÜ(n) indica la cantidad de primos relativos menores o iguales a \( n \).

Esta funci√≥n est√° presente en varios resultados importantes de la teor√≠a de n√∫meros y algunas de sus propiedades se usan en la implementaci√≥n del RSA. En primer lugar, de su definici√≥n es claro que:
""")

st.latex(r'''\phi(p) = p - 1 \text{ si } p \text{ es un primo.}''')

st.markdown("""
Por otro lado, un resultado muy √∫til y no tan obvio de esta funci√≥n es que es multiplicativa. Esto quiere decir que para cualesquiera dos n√∫meros \( m \) y \( n \) primos relativos se tiene:
""")

st.latex(r'''\phi(mn) = \phi(m) \phi(n)''')

st.markdown("""
Existen distintas formas de demostrar este hecho, como por ejemplo usando t√©cnicas de teor√≠a de n√∫meros como la inversi√≥n de M√∂bius. Otra forma m√°s avanzada de demostrar esta propiedad es que es un corolario del teorema chino de los residuos de la teor√≠a de anillos (Esto puede verse en la p√°gina 265 de la tercera edici√≥n del libro de √Ålgebra Abstracta de Dummit y Foote).

Finalmente, es importante el siguiente teorema:
""")

############
import streamlit as st

st.title("Teorema de Euler-Fermat")

st.markdown("""
Sean \(a\) y \(n\) enteros positivos, primos relativos, entonces se tiene la congruencia:
""")
st.latex(r'''n^{\phi(a)} \equiv 1 \mod a''')

####### Firma Digital

import streamlit as st
import hashlib
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
import base64

st.title("Firma digital con RSA")

st.markdown("""
La firma digital permite garantizar la autenticidad e integridad de un mensaje o documento. En el caso de RSA, el proceso funciona de la siguiente manera:
""")

st.markdown("""
1. **Generaci√≥n de claves**: Se generan un par de claves, una clave privada \(d\) y una clave p√∫blica \(e\). La clave privada se mantiene en secreto, mientras que la clave p√∫blica se distribuye.
2. **Creaci√≥n del hash**: Se calcula un hash criptogr√°fico del mensaje que se desea firmar. El hash es un resumen digital del mensaje que permite verificar su integridad.
3. **Firma**: El hash se cifra con la clave privada \(d\) para generar la firma digital.
4. **Verificaci√≥n**: El receptor del mensaje utiliza la clave p√∫blica \(e\) para descifrar la firma digital.
    - Si el valor descifrado coincide con el hash calculado del mensaje original, se verifica la autenticidad e integridad del mensaje.
""")

# Generate RSA keys
def generate_keys():
    key = RSA.generate(2048)
    private_key = key.export_key()
    public_key = key.publickey().export_key()
    return private_key, public_key

# Create hash of the message
def create_hash(message):
    hash_obj = SHA256.new(message.encode('utf-8'))
    return hash_obj

# Sign the message
def sign_message(private_key, hash_obj):
    rsa_private_key = RSA.import_key(private_key)
    signature = pkcs1_15.new(rsa_private_key).sign(hash_obj)
    return base64.b64encode(signature).decode('utf-8')

# Verify the signature
def verify_signature(public_key, signature, message):
    rsa_public_key = RSA.import_key(public_key)
    hash_obj = create_hash(message)
    signature_bytes = base64.b64decode(signature.encode('utf-8'))
    try:
        pkcs1_15.new(rsa_public_key).verify(hash_obj, signature_bytes)
        return True
    except (ValueError, TypeError):
        return False

# Streamlit interface
if 'private_key' not in st.session_state:
    st.session_state.private_key, st.session_state.public_key = generate_keys()

st.markdown("### 1. Generaci√≥n de claves")
st.text_area("Clave privada (mantener en secreto):", st.session_state.private_key.decode('utf-8'), height=100)
st.text_area("Clave p√∫blica (distribuir):", st.session_state.public_key.decode('utf-8'), height=100)

st.markdown("### 2. Creaci√≥n del hash")
message = st.text_area("Mensaje a firmar:", "Este es un mensaje secreto.")
hash_obj = create_hash(message)
st.text_input("Hash del mensaje:", hash_obj.hexdigest())

st.markdown("### 3. Firma")
if st.button("Firmar mensaje"):
    signature = sign_message(st.session_state.private_key, hash_obj)
    st.session_state.signature = signature
    st.text_input("Firma digital:", signature)

st.markdown("### 4. Verificaci√≥n")
signature_to_verify = st.text_input("Firma digital a verificar:", st.session_state.get('signature', ''))
message_to_verify = st.text_area("Mensaje original para verificaci√≥n:", message)

if st.button("Verificar firma"):
    is_valid = verify_signature(st.session_state.public_key, signature_to_verify, message_to_verify)
    if is_valid:
        st.success("La firma es v√°lida. El mensaje es aut√©ntico y no ha sido alterado.")
    else:
        st.error("La firma no es v√°lida. El mensaje puede haber sido alterado o la firma es incorrecta.")



#########

import streamlit as st
import random
from PIL import Image
import requests
from io import BytesIO

# T√≠tulo de la aplicaci√≥n
st.title("Pr√°ctica con RSA")

# Contexto
st.write("""
Digamos que Andr√©s tiene algo muy importante que decirle a su amiga Sof√≠a. Para que Andr√©s le pueda enviar el mensaje secreto, Sof√≠a implementa un sistema de RSA.
Lo primero que hace entonces es seleccionar dos n√∫meros primos P y Q muy grandes.
""")

# URL de la imagen de criptograf√≠a
image_url = "https://miro.medium.com/v2/resize:fit:828/format:webp/1*iQ6VqwTlVn8v4FkgPsv-0g.png"

# Cargar la imagen desde la URL
response = requests.get(image_url)
image = Image.open(BytesIO(response.content))

# Agregar la imagen debajo del t√≠tulo
st.image(image, caption="Criptograf√≠a", use_column_width=True)

# Generaci√≥n de los n√∫meros primos P y Q
st.subheader("Generaci√≥n de los n√∫meros primos P y Q")

def isPrime(n):
    k = 0
    for i in range(2, n):
        if n % i == 0:
            k = i
            break
    return k == 0

a = 1000
b = 2000

P = random.randint(a, b)
while not isPrime(P):
    P = random.randint(a, b)

Q = random.randint(a, b)
while not isPrime(Q):
    Q = random.randint(a, b)

st.write(f"P = {P}")
st.write(f"Q = {Q}")

# Selecci√≥n del n√∫mero e y c√°lculo de N, phi(N), d
st.subheader("Selecci√≥n del n√∫mero e y c√°lculo de N, phi(N), d")

alpha = 10
beta = 50
e = random.randint(alpha, beta)
N = P * Q

def gcd(v1, v2): 
    if v2 == 0: 
        return v1
    else: 
        return gcd(v2, v1 % v2) 

def phi(n):
    k = 0
    for i in range(1, n + 1):
        if gcd(n, i) == 1:
            k = k + 1
    return k

phiN = (P - 1) * (Q - 1)
exp = phi(phiN) - 1
D = e ** exp
d = D % phiN

while not (e * d) % phiN == 1:
    e = random.randint(alpha, beta)
    D = e ** exp
    d = D % phiN
    
st.write(f"La clave privada de Sof√≠a es el n√∫mero d = {d}")
st.write(f"La clave p√∫blica que publica Sof√≠a es el par (N, e) = ({N}, {e})")

# Informaci√≥n adicional sobre la clave privada y p√∫blica de Sof√≠a
st.write("La clave privada de Sof√≠a es el n√∫mero d = 862709")
st.write("La clave p√∫blica que publica Sof√≠a es el par (N,e) = ( 1789813 , 29 )")

# Contexto adicional sobre c√≥mo Andr√©s codifica y encripta su mensaje
st.write("""
Con esta informaci√≥n, Andr√©s codifica el mensaje que le quiere enviar a Sof√≠a. En este caso, el mensaje que le quiere enviar es ‚Äúte amo‚Äù. Supongamos que Andr√©s y Sof√≠a ya hab√≠an hablado previamente sobre su relaci√≥n y que Sof√≠a hab√≠a decidido darle una oportunidad a Andr√©s para que le dijera lo que realmente sent√≠a. Para esto, Sof√≠a le dio entonces un tiempo a Andr√©s para que pensara y le dio la siguiente lista con c√≥digos para cuando Andr√©s quisiera responderle: 1=si, 2=no, 3=te, 4=quiero, 5=amo, 6=ver. El mensaje de Andr√©s codificado con esta lista ser√≠a entonces M=35. As√≠, Andr√©s procede a encriptar su mensaje con ayuda de la clave p√∫blica de Sof√≠a (N,e) efectuando la siguiente operaci√≥n C = M^e (mod N) y publica su mensaje encriptado C. (El lector tambi√©n puede escoger un mensaje diferente, codificarlo con la lista dada y pas√°rselo al siguiente m√©todo. Lo √∫nico que tiene que verificar es que su mensaje no sea mayor que N y que sea distinto a los dos primos P y Q)
""")

# Encriptaci√≥n del mensaje de Andr√©s
st.subheader("Encriptaci√≥n del mensaje de Andr√©s")

M = st.number_input("El mensaje de Andr√©s para Sof√≠a es (luego de insertar el mensaje oprima ENTER): ", min_value=0, step=1)
exp = M ** e
C = exp % N
st.write(f"Mensaje encriptado C = {C}")

# Desencriptaci√≥n del mensaje encriptado de Andr√©s
st.subheader("Desencriptaci√≥n del mensaje encriptado de Andr√©s")

exp = C ** d
m = exp % N
st.write(f"Mensaje desencriptado MD = {m}")

# Contexto final
st.write("""
De esta manera, Sof√≠a se entera de que Andr√©s en efecto s√≠ la ama y sabe que nadie m√°s, adem√°s de ella y Andr√©s, lo sabe. As√≠, Sof√≠a y Andr√©s pudieron comunicarse de manera segura y Andr√©s pudo decirle lo que realmente sent√≠a a Sof√≠a.
""")

# Encriptar y desencriptar archivos con RSA
st.subheader("Encriptar y desencriptar archivos con RSA")

# Cargar archivo para encriptar
uploaded_file = st.file_uploader("Carga un archivo para encriptar", type=["txt"])

if uploaded_file is not None:
    # Leer el contenido del archivo
    file_content = uploaded_file.read().decode('utf-8')
    st.write("Contenido del archivo:")
    st.write(file_content)
    
    # Encriptar el contenido del archivo
    file_content_int = int.from_bytes(file_content.encode(), 'big')
    encrypted_content_int = pow(file_content_int, e, N)
    encrypted_content = encrypted_content_int.to_bytes((encrypted_content_int.bit_length() + 7) // 8, 'big')
    
    st.write("Contenido encriptado del archivo:")
    st.write(encrypted_content)
    
    # Bot√≥n para descargar el archivo encriptado
    st.download_button(label="Descargar archivo encriptado", data=encrypted_content, file_name="encrypted_file.txt")

    # Desencriptar el contenido del archivo encriptado
    decrypted_content_int = pow(encrypted_content_int, d, N)
    decrypted_content = decrypted_content_int.to_bytes((decrypted_content_int.bit_length() + 7) // 8, 'big').decode('utf-8')
    
    st.write("Contenido desencriptado del archivo:")
    st.write(decrypted_content)